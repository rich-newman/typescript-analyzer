<Project>

  <!-- 
  Provide a way for a build to be done prior to publishing, so 
  that building and publishing can be done in a single step. 
  -->
  <PropertyGroup Condition="'$(BuildBeforePublish)' == 'true'">
    <PublishToMarketplaceDependsOn>Rebuild</PublishToMarketplaceDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <!-- 
    Update the build tools NuGet package reference to generate a path property. This will
    cause MSBuild to create a property called `PkgMicrosoft_VSSDK_BuildTools` that defines
    the location of the NuGet package. We will use that to find the VsixPublisher executable.
    -->
    <PackageReference Update="Microsoft.VSSDK.BuildTools">
      <GeneratePathProperty>true</GeneratePathProperty>
    </PackageReference>
  </ItemGroup>

  <Target Name="PublishToMarketplace" DependsOnTargets="$(PublishToMarketplaceDependsOn)">
    <Message Text="Publishing extension to the marketplace..." Importance="normal"/>

    <!-- Before anything else happens, ensure that only "Release" builds can be published. -->
    <Error
      Condition="'$(Configuration)' != 'Release'"
      Text="The configuration must be 'Release' when publishing to the marketplace."
      />

    <PropertyGroup>
      <!-- 
      Find the VsixPublisher executable if it has not been specified. This uses the property that was 
      generated by setting the `GeneratePathProperty` property to true for the build tools NuGet package.
      -->
      <VsixPublisher Condition="'$(VsixPublisher)' == ''">$(PkgMicrosoft_VSSDK_BuildTools)\tools\vssdk\bin\VsixPublisher.exe</VsixPublisher>

      <!-- 
      If a manifest file name has not been specified, then search for it by starting from the
      project directory and looking up. Although the function is called `GetPathOfFileAbove`,
      it actually starts looking in the specified directory (the second parameter), so the
      manifest file can be placed alongside the the project file and it will be found.
      -->
      <PublishManifest Condition="'$(PublishManifest)' == ''">$([MSBuild]::GetPathOfFileAbove('publish.json', '$(ProjectDir)'))</PublishManifest>

      <!-- Build the path to the extension file if it hasn't been specified. -->
      <PublishExtension  Condition="'$(PublishExtension)' == ''">$(ProjectDir)$(TargetVsixContainer)</PublishExtension>
    </PropertyGroup>

    <!-- Log some properties to assist with debugging. -->
    <Message Text="BuildTools:      $(PkgMicrosoft_VSSDK_BuildTools)" Importance="$(PublishLogLevel)" />
    <Message Text="VsixPublisher:   $(VsixPublisher)" Importance="$(PublishLogLevel)" />
    <Message Text="Manifest:        $(PublishManifest)" Importance="$(PublishLogLevel)" />
    <Message Text="Extension:       $(PublishExtension)" Importance="$(PublishLogLevel)" />
    <Message Text="Ignore Warnings: $(PublishIgnoreWarnings)" Importance="$(PublishLogLevel)" />

    <!-- Verify that the manifest file was found. -->
    <Error
      Condition="'$(PublishManifest)' == '' or !Exists('$(PublishManifest)')"
      Text="The 'publish manifest' file was not found. Either specify the 'PublishManifest' build property, or create a 'publish.json' file in the same directory as the project file or solution file. For more information about the 'publish manifest' file, visit https://docs.microsoft.com/visualstudio/extensibility/walkthrough-publishing-a-visual-studio-extension-via-command-line#publishmanifest-file"
      />

    <!-- A personal access token needs to be specified. -->
    <Error
      Condition="'$(PersonalAccessToken)' == ''"
      Text="A personal access token must be specified in the 'PersonalAccessToken' build property."
      />

    <!-- Verify that the extension file was found. -->
    <Error
      Condition="'$(PublishExtension)' == '' or !Exists('$(PublishExtension)')"
      Text="The extension file could not be found at '$(PublishExtension)'."
      />

    <!-- Everything should be valid now, so define the command to publish the extension. -->
    <PropertyGroup>
      <PublishCommand>&quot;$(VsixPublisher)&quot; publish -personalAccessToken &quot;$(PersonalAccessToken)&quot; -payload &quot;$(PublishExtension)&quot; -publishManifest &quot;$(PublishManifest)&quot;</PublishCommand>
      <PublishCommand Condition="'$(PublishIgnoreWarnings)' != ''">$(PublishCommand) -ignoreWarnings &quot;$(PublishIgnoreWarnings)&quot;</PublishCommand>
    </PropertyGroup>

    <Exec
      Command="$(PublishCommand)"
      StandardOutputImportance="normal"
      StandardErrorImportance="high"
      LogStandardErrorAsError="true"
      IgnoreExitCode="true"
      >
      <Output TaskParameter="ExitCode" PropertyName="PublishExitCode"/>
    </Exec>

    <Message Condition="'$(PublishExitCode)' == '0'" Text="Extension published successfully." Importance="normal"/>
    <Error Condition="'$(PublishExitCode)' != '0'" Text="Failed to publish the extension."/>
  </Target>

</Project>
